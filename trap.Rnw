% $Id: hdf.Rnw 336 2012-09-19 08:45:51Z jbao $

\documentclass[a4paper]{article}

\usepackage{graphicx,subfig}
\usepackage{pdfpages}
\usepackage{amsmath}
\usepackage[margin=1in]{geometry}
\usepackage{longtable}
\usepackage{color, colortbl}
\definecolor{Gray}{gray}{0.9}

\DeclareMathOperator{\erf}{erf}
\DeclareMathOperator{\IQR}{IQR}
\everymath{\displaystyle}

\renewcommand{\thesubfigure}{\Alph{subfigure}}
\mathchardef\mhyphen="2D

\newenvironment{narrow}[2]{%
  \begin{list}{}{%
  \setlength{\topsep}{0pt}%
  \setlength{\leftmargin}{#1}%
  \setlength{\rightmargin}{#2}%
  \setlength{\listparindent}{\parindent}%
  \setlength{\itemindent}{\parindent}%
  \setlength{\parsep}{\parskip}}%
\item[]}{\end{list}}

\title{Cytokine/receptor mRNA expression levels in HDF}
\author{Jie Bao}

\begin{document}

\maketitle

<<label=base,echo=False,fig=FALSE>>=
library(evd)
library(ggplot2)
library(reshape)
library(Biostrings)
library(org.Hs.eg.db)
library(doMC)
library(grid)
library(devtools)
load_all('~/tool/util')

registerDoMC(4)
theme_set(theme_bw(15))

subplot <- function(x, y) viewport(layout.pos.row=x, layout.pos.col=y) 
vplayout <- function(x, y) {
    grid.newpage() 
    pushViewport(viewport(layout=grid.layout(x,y)))
}
@

<<label=gev,echo=False,fig=True>>=
gev.param <- read.delim('~/MicroarrayAnalysis/trunk/trap/transfac.gc0.5.GEV_lin.dat')
res.cebpd <- read.delim('~/MicroarrayAnalysis/trunk/trap/human_cebpd.trap', header=F)
#mat <- res$V1[res$V1 %in% gev.param$X.matrix]
gev.pval <- function(res, mat) { 
    param <- subset(gev.param, X.matrix==mat)
    L <- 1000
    xi <- param$xi0 + param$xi1*log10(L)
    sig <- param$sig0 + param$sig1*log10(L)
    mu <- param$mu0 + param$mu1*log10(L)
    xfit <- seq(-13,2,length=100)
    yfit <- dgev(xfit, loc=mu, scale=sig, shape=xi)
    pos <- log10(res$V2[res$V1==mat])
    pval <- pgev(pos, loc=mu, scale=sig, shape=xi, lower.tail=F)
    list(xfit=xfit, yfit=yfit, pos=pos, pval=pval)
}
res <- gev.pval(res.cebpd, 'V$NFKAPPAB_01')
df <- data.frame(x=res$xfit, y=res$yfit)
df.label <- data.frame(x=0,y=0.2,label=sprintf("italic(p)==%.1e",res$pval))
print(ggplot(df,aes(x,y)) + geom_line() + 
    geom_vline(xintercept=res$pos,linetype='dashed') +
    geom_text(data=df.label,aes(x,y,label=label),parse=T) +
    labs(x=expression(paste(log[10]~'A')), y='Density', 
        title='V$NFKAPPAB_01 affinity distribution\n')
)
@

% ----------------------------------------------------------------------------

<<label=cytokine_trap,echo=False,fig=False,cache=True,eval=False>>=
human.cytokine <- read.DNAStringSet('~/data/fimo/human_cytokine.fa')
refseq2symbol <- function(refseq.str) {
    all.str <- unlist(strsplit(refseq.str, '_'))
    refseq <- paste(all.str[1:2], collapse='_')
    #print(refseq)
    get(get(refseq,org.Hs.egREFSEQ2EG), org.Hs.egSYMBOL)
}
moi <- 'V$CEBPD_Q6'
cytokine.symbol <- sapply(names(human.cytokine), refseq2symbol)

all.pval <- foreach(i=1:length(human.cytokine), .combine='c') %dopar% {
    seq.file <- tempfile(tmpdir='/export/work/jbao/data/trap/')
    res.file <- tempfile(tmpdir='/export/work/jbao/data/trap/')
    write.XStringSet(human.cytokine[i], seq.file)
    system(paste('./TRAP /home/sohse/TFP_2012.1_data/dat/matrix.dat',seq.file,'>',
        res.file))
    res <- read.delim(res.file, header=F)
    gev.pval(res, moi)$pval
}
@

% ----------------------------------------------------------------------------

<<label=affinity_diff,echo=False,fig=True,eval=False>>=
ctrl <- read.delim('~/data/hdf/hdf_ctrl_16091.tsv')
treated <- read.delim('~/data/hdf/hdf_nhk_16091.tsv')
ctrl.tpoint <- c(0,2,4,8,12,24)
treated.tpoint <- c(0,1,2,3,4,6,8,10,12,18,24)
common <- intersect(ctrl$Gene, cytokine.symbol)
idx.affinity <- which(cytokine.symbol %in% common)
idx.diff <- which(ctrl$Gene %in% common)
core <- cbind(ctrl[idx.diff,-1], treated[idx.diff,-1])
pval.diff <- apply(core,1,lrtest,ctrl.tpoint,treated.tpoint)
symbol.diff <- ctrl$Gene[idx.diff]
pval.affinity <- all.pval[idx.affinity]
symbol.affinity <- cytokine.symbol[idx.affinity]
df <- data.frame(affinity=pval.affinity, 
    diff=pval.diff[match(symbol.affinity,symbol.diff)], label=symbol.affinity)
print(ggplot(df,aes(-log10(affinity),-log10(diff))) + geom_point() +
    geom_text(aes(label=label),size=3,hjust=-0.2,alpha=0.3) +
    xlim(0.5,3) +
    labs(title='CEBPD target genes\n')
)
@

% ----------------------------------------------------------------------------

<<label=affinity_upregulation,echo=False,fig=True,cache=True,eval=False>>=
cytokine.sig <- unique(df$label[df$diff<0.05])
#treated <- list(dat=treated[match(cytokine.sig,treated$Gene),], cond='NHK', 
#    tpoint=treated.tpoint)
#df <- plot.logistic(treated, '~/data/hdf/hdf-cytokine_logistic.pdf')
idx.treated <- which(names(treated)=='Gene')
#fit.treated <- apply(treated[match(cytokine.sig,treated$Gene),-idx.treated],1,
#    function(x) fit.logistic(treated.tpoint,x))
fit.treated <- apply(treated[,-idx.treated],1,
    function(x) fit.logistic(treated.tpoint,x))
nfit <- 100
xfit <- seq(0,max(treated.tpoint),length=nfit)
uptime <- apply(fit.treated,2,function(x)xfit[which.max(abs(diff(x)/diff(xfit)))])
df.uptime <- melt(uptime)
#df.uptime$Gene <- cytokine.sig
df.uptime$Gene <- treated$Gene
df.affinity.uptime <- subset(df, diff<0.05)
df.affinity.uptime$uptime <- df.uptime$value[match(df.affinity.uptime$label,
    df.uptime$Gene)]
print(ggplot(df.affinity.uptime,aes(uptime,-log10(affinity))) + geom_point() +
    geom_text(aes(label=label),size=3,hjust=-0.2,alpha=0.3) +
    xlim(0,15) +
    labs(title='CEBPD target genes\n')
)
@

% ----------------------------------------------------------------------------

<<label=matrix_scan,echo=False,fig=True,eval=False>>=
pval.cebpd <- res.cebpd[res.cebpd$V1 %in% gev.param$X.matrix,]
idx <- match(pval.cebpd$V1, gev.param$X.matrix)
L <- 1000
pval.cebpd$xi <- gev.param$xi0[idx] + gev.param$xi1[idx]*log10(L)
pval.cebpd$sig <- gev.param$sig0[idx] + gev.param$sig1[idx]*log10(L)
pval.cebpd$mu <- gev.param$mu0[idx] + gev.param$mu1[idx]*log10(L)
#pval.cebpd$pval <- ddply(pval.cebpd, .(V1), function(x) pgev(log10(x$V2), 
#    loc=x$mu, scale=x$sig, shape=x$xi, lower.tail=F))$V1
pval.cebpd$pval <- foreach(i=1:nrow(pval.cebpd), .combine='c') %dopar% {
    pgev(log10(pval.cebpd$V2[i]), loc=pval.cebpd$mu[i], scale=pval.cebpd$sig[i], 
        shape=pval.cebpd$xi[i], lower.tail=F)
}

print(ggplot(pval.cebpd[grep('V\\$',pval.cebpd$V1),],aes(-log10(pval),V4)) + 
    geom_point() +
    #geom_text(aes(label=V1),size=3,hjust=-0.2,alpha=0.3) +
    geom_text(data=pval.cebpd[grep('ATF|NFK',pval.cebpd$V1),],aes(label=V1),
        size=3,hjust=-0.2,colour='red') +
    xlim(0,4.5) +
    labs(x=expression(paste(-log[10]~italic(p),'-value')), 
        y='Information content', 
        title='Motifs binding to CEBPD\n')
)
@

% ----------------------------------------------------------------------------

<<label=uptime,echo=False,fig=True,cache=True,eval=True>>=
# get upregulated DEG
ctrl <- read.delim('~/data/hdf/hdf_ctrl_16091.tsv')
treated <- read.delim('~/data/hdf/hdf_nhk_16091.tsv')
diff <- read.delim('~/data/hdf/hdf_diff_16091.tsv')
diff.mean <- rowMeans(diff[,-1])
ctrl.tpoint <- c(0,2,4,8,12,24)
treated.tpoint <- c(0,1,2,3,4,6,8,10,12,18,24)
core <- cbind(ctrl[,-1], treated[,-1])
pval <- apply(core,1,lrtest, ctrl.tpoint, treated.tpoint)
qval <- p.adjust(pval, 'BH')
sig.gene <- ctrl$Gene[diff.mean>0&qval<0.05]

# get uptime
idx.treated <- which(names(treated)=='Gene')
fit.treated <- apply(treated[,-idx.treated],1,
    function(x) fit.logistic(treated.tpoint,x))
nfit <- 100
xfit <- seq(0,max(treated.tpoint),length=nfit)
uptime <- apply(fit.treated,2,function(x)xfit[which.max(abs(diff(x)/diff(xfit)))])
#df.uptime <- data.frame(gene=treated$Gene,uptime=uptime)
df.uptime <- data.frame(gene=sig.gene,uptime=uptime[match(sig.gene,treated$Gene)])
df.uptime$phase <- 'other'
df.uptime$phase[df.uptime$uptime<5] <- 'early'
df.uptime$phase[df.uptime$uptime<15&df.uptime$uptime>=5] <- 'late'
df.uptime <- subset(df.uptime, phase!='other')
@

% ----------------------------------------------------------------------------

<<label=seq,echo=False,fig=False,eval=False>>=
human.promoter <- read.DNAStringSet('~/data/fimo/human_upstream1000.fa')
tf.entrez <- unlist(mget(as.character(df.uptime$gene), org.Hs.egSYMBOL2EG, 
    ifnotfound=NA))
tf.entrez <- tf.entrez[!is.na(tf.entrez)]
tf.refseq <- unlist(mget(tf.entrez, org.Hs.egREFSEQ))
tf.refseq <- tf.refseq[grep('NM',tf.refseq)]
idx <- grep(paste(tf.refseq,collapse='_|'), names(human.promoter))

refseq2symbol <- function(refseq.str) {
    all.str <- unlist(strsplit(refseq.str, '_'))
    refseq <- paste(all.str[1:2], collapse='_')
    #print(refseq)
    entrez <- unlist(mget(refseq,org.Hs.egREFSEQ2EG,ifnotfound=NA))
    if (is.na(entrez))
        return('')
    else
        return(get(entrez, org.Hs.egSYMBOL))
}
wd <- '~/data/hdf/sig_seq/'
for (i in 1:length(idx)) {
#tmp <- foreach(i=1:length(idx), .combine='c') %dopar% {
    symbol <- refseq2symbol(names(human.promoter)[idx[i]])
    if (symbol != '') {
        seq.file <- paste(wd,symbol,'.fa',sep='')
        write.XStringSet(human.promoter[idx[i]], seq.file)
    }
    symbol
}
@

% ----------------------------------------------------------------------------

<<label=tf_scan,echo=False,fig=False,cache=False,eval=False>>=
all.file <- dir(wd, 'fa')
foreach(i=1:length(all.file)) %dopar% {
    seq.file <- paste(wd,all.file[i],sep='')
    res.file <- paste(wd,sub('fa','trap',all.file[i]),sep='')
    system(paste('./TRAP ~/data/TRANSFAC/TFP_2012.3/dat/matrix.dat',seq.file,
        '>',res.file))
}
@

%<<label=plot_mfpt,echo=False,fig=True,width=7,height=7,eval=True>>=
%mfpt <- hppi
%map <- hppi.map
%tf.pattern <- c('NFKB','RELA','STAT5B','TEAD1','SREBF1','PAX3','NFAT','IRF',
%    'FOXJ2','^REL$','CEBP','ZEB1')
%#tf.pattern <- c('NFE2','IKZF1','JUN','FOS','MAFG','GABPA','E4F1','NFAT',
%#    'NFKB','IRF1','POU2F1','GATA1','LEF1')
%#tf.pattern <- c('STAT','FOXJ2','ETV7','ETS','ONECUT','RUNX','NFAT')
%tf <- unlist(sapply(tf.pattern, function(x) map$idmap$official[grep(x,map$idmap$official)]))
%regulator <- tapply(unlist(mSigDB),unlist(mSigDB),function(x){names(x)})
%cytokine <- read.delim('../python/hsa04060.ligand', header=F)$V1
%
%dist2tf <- function(receptor, tf, metric) {
%    tf.idx <- which(tf == map$idmap$official)
%    receptor.idx <- grep(receptor, map$idmap$official)
%
%    if (metric == 'mfpt')
%        return(sapply(receptor.idx, function(x) mfpt$mfpt[x,tf.idx]))
%    else if (metric == 'sp')
%        return(sapply(receptor.idx, function(x) mfpt$sp[x,tf.idx]))
%}
%il1r.dist <- sapply(tf, function(x) dist2tf('IL1R[1-2]',x,'mfpt'))
%tnfr.dist <- sapply(tf, function(x) dist2tf('TNFR',x,'mfpt'))
%il1r.dist <- il1r.dist[apply(il1r.dist,1,function(x)all(x!=-1)),]
%tnfr.dist <- tnfr.dist[apply(tnfr.dist,1,function(x)all(x!=-1)),]
%#tf.dist <- Re((tf.dist - apply(tf.dist,2,median)) / 
%#    (apply(tf.dist,2,IQR)/(2*sqrt(2)*erfc(0.5))))
%df <- data.frame(IL1R=colMeans(il1r.dist), TNFR=colMeans(tnfr.dist), tf=tf)
%
%print(ggplot(df,aes(IL1R,TNFR)) + geom_point() +
%    geom_abline(aes(intercept=0,slope=1),colour='blue',linetype='dashed') +
%    geom_text(aes(label=tf),size=3,hjust=-0.2,alpha=0.3) + 
%    xlim(9.6,10.4) + ylim(9.6,10.4) +
%    #xlim(9.9,10.4) +
%    opts(title='MFPT to TFs\n')
%)
%@

% ----------------------------------------------------------------------------

<<label=tf_network,echo=False,fig=True,width=8,height=6,cache=True,eval=True>>=
wd <- '~/data/hdf/sig_seq/'
#tf.symbol <- 'IRF_|IRF7|CEBPD|EMX2|MEF2D|NFE2|NFK|RELB|RUNX1|STAT[134]'
tf.symbol <- 'V\\$'
idx <- grep(tf.symbol, gev.param$X.matrix)
L <- 1000
all <- NULL
all.file <- dir(wd,'trap')
#for (i in 1:length(all.file)) {
all <- foreach(ii=1:length(all.file), .combine='rbind') %dopar% {
#all <- foreach(idx=1:2, .combine='rbind') %dopar% {
    res <- read.delim(paste(wd,all.file[ii],sep=''), header=F)
    df <- subset(res, V1 %in% gev.param$X.matrix[idx])
    idx <- match(df$V1, gev.param$X.matrix)
    df$xi <- gev.param$xi0[idx] + gev.param$xi1[idx]*log10(L)
    df$sig <- gev.param$sig0[idx] + gev.param$sig1[idx]*log10(L)
    df$mu <- gev.param$mu0[idx] + gev.param$mu1[idx]*log10(L)
    df$pval <- rep(0,nrow(df))
    for (i in 1:nrow(df)) {
        df$pval[i] <- pgev(log10(df$V3[i]), loc=df$mu[i], scale=df$sig[i],
            shape=df$xi[i], lower.tail=F)
    }
    df$gene <- sub('.trap', '', all.file[ii])
    #if (df$tf %in% df.uptime$Gene) {
    #    df$uptime <- df.uptime$value[which(df.uptime$Gene==df$tf)]
    #    all <- rbind(all, df)
    #}
    #all <- rbind(all, df)
    df[,c('V1','pval','gene')]
}
#all.wide <- reshape(all[,c('V1','pval','gene')], v.names = "pval", idvar = "gene",
#    timevar = "V1", direction = "wide")
#stop()

motif2symbol <- read.delim('~/data/TRANSFAC/Motif_Symbol.txt') 
motif2symbol$tid <- sub('M[0-9]+_','',motif2symbol$Motif)
all$phase <- df.uptime$phase[match(all$gene, df.uptime$gene)]
all$tf <- motif2symbol$Symbol[match(all$V1, motif2symbol$tid)]

#pdf('~/data/hdf/hdf-tf_scan.pdf',8,11)
#unique.matrix <- levels(factor(all$V1))
#for (i in 1:ceiling(length(unique.matrix)/12)) {
    #slice <- seq((i-1)*12+1,i*12)
    #slice <- slice[!(slice > length(unique.matrix))]
    #slice <- 1:6
    #current <- subset(all, V1 %in% unique.matrix[slice])
    #print(ggplot(current,aes(uptime,-log10(pval))) + 
    #    geom_point() +
    #    facet_wrap(~V1,ncol=3) +
    #    geom_text(aes(label=tf),size=2,hjust=-0.1,alpha=0.3) +
    #    #geom_text(data=pval.cebpd[grep('ATF|NFK',pval.cebpd$V1),],aes(label=V1),
    #    #    size=3,hjust=-0.2,colour='red') +
    #    xlim(0,26) +
    #    #labs(x=expression(paste(-log[10]~italic(p),'-value')), 
    #    #    y='Information content', 
    #    #    title='Motifs binding to CEBPD\n')
    #    labs(x='Upregulation time (h)',
    #        y=expression(paste(-log[10]~italic(p),'-value')))
    #)
#}
#dev.off()
#qpcr.pval <- read.delim('~/data/hdf/hdf_qpcr_pval.tsv')
#qpcr.pval <- rbind(qpcr.pval, data.frame(gene='TGFB2',V1=qpcr.pval$V1[which(qpcr.pval$gene=='TGFB1')]))
#qpcr.pval <- rbind(qpcr.pval, data.frame(gene='TGFB3',V1=qpcr.pval$V1[which(qpcr.pval$gene=='TGFB1')]))
#all$full.red.pval <- qpcr.pval$V1[match(all$tf,qpcr.pval$gene)]
#print(ggplot(all,aes(-log10(pval),-log10(full.red.pval))) + 
#    geom_point() +
#    facet_wrap(~V1,ncol=3) +
#    geom_text(aes(label=tf),size=3,hjust=-0.2,alpha=0.5) +
#    #geom_text(data=pval.cebpd[grep('ATF|NFK',pval.cebpd$V1),],aes(label=V1),
#    #    size=3,hjust=-0.2,colour='red') +
#    xlim(0,4) + #ylim(0,11) +
#    #labs(x=expression(paste(-log[10]~italic(p),'-value')), 
#    #    y='Information content', 
#    #    title='Motifs binding to CEBPD\n')
#    labs(x='Affinity',y='Differential regulation (IKKi)')
#        #y=expression(paste(-log[10]~italic(p),'-value')))
#)
@

% ----------------------------------------------------------------------------

<<label=ttest,echo=False,fig=True,eval=True>>=
# t-test of sitar scores between early and late genes
pval.early.late <- function(df, type) {
    df.early <- subset(df, phase=='early')
    df.late <- subset(df, phase=='late')
    score.early <- df.early$pval[df.early$pval!=0]
    score.late <- df.late$pval[df.late$pval!=0]
    if (length(score.early)>1 & length(score.late)>1) {
        res <- t.test(-log10(score.early),-log10(score.late))
        if (type=='stat')
            return(res$statistic)
        else
            return(res$p.value)
    } else
        return(NA)    
}
#unique.tf <- unique(all$tf)
#for (i in 1:length(unique.tf)) {
#    df <- subset(all, tf==unique.tf[i])
#    
#    df.early <- subset(df, phase=='early')
#    df.late <- subset(df, phase=='late')
#    score.early <- df.early$pval[df.early$pval!=0]
#    score.late <- df.late$pval[df.late$pval!=0]
#    if (length(score.early)>1 & length(score.late)>1)
#        t.test(-log10(score.early),-log10(score.late))$statistic
#}
all <- subset(all, !is.na(tf))
tstat <- ddply(all, .(tf), function(x) pval.early.late(x,'stat'))
pval <- ddply(all, .(tf), function(x) pval.early.late(x,'pval'))
df.t <- merge(tstat, pval)
df.t$uptime <- uptime[match(df.t$tf, ctrl$Gene)]
df.t$tf.diff.qval <- qval[match(df.t$tf, ctrl$Gene)]

print(ggplot(df.t,aes(abs(t),-log10(tf.diff.qval))) + geom_point() +
    geom_text(aes(label=tf),size=3,hjust=-0.2) 
)
#print(ggplot(df.t,aes(uptime,t)) + geom_point(aes(size=-log10(V1))) +
#    geom_text(data=subset(df.t,V1<0.2),aes(label=tf),size=3,hjust=-0.2) +
#    guides(size=guide_legend(title=expression(paste(-log[10]~'p-value')))) +
#    xlim(0,15) + labs(title='Affinity\n') +
#    theme(legend.position=c(0.85,0.85),legend.key=element_blank(),
#        legend.background=element_blank()) 
#)

#df <- merge(df.t, sitar.res)
#names(df) <- c('tf','t','ttest.pval','tf.uptime','gene','score','gene.phase')
#df$tf.diff.qval <- qval[match(df$tf, ctrl$Gene)]
#df$gene.diff.qval <- qval[match(df$gene, ctrl$Gene)]
@

% ----------------------------------------------------------------------------

<<label=profile,echo=False,fig=True,eval=False>>=
trap <- read.delim('~/data/hdf/qpcr_seq/IL6.trap', header=F)
res <- trap[grep('CEBPB_Q6$|NFKB_Q6$',trap$V1),]
#res <- res[grep('CEBPD|NFKB_Q6$',res$V1),]
df <- NULL
for (i in 1:nrow(res)) {
    profile <- as.numeric(unlist(strsplit(as.character(res$V2[i]),',')))
    current <- data.frame(matrix=res$V1[i], pos=1:length(profile), 
        affinity=profile)
    df <- rbind(df, current)
}
data <- df$affinity[df$matrix==levels(factor(df$matrix))[1]]
kernel <- df$affinity[df$matrix==levels(factor(df$matrix))[2]]
df <- rbind(df, data.frame(matrix='Convolution', 
    pos=1:(length(data)+length(kernel)-1),
    affinity=convolve(data,rev(kernel),type='o')))

get.peak <- function(df) {
    res <- peakdet(df$affinity, 0.001, df$pos-1001)
    as.data.frame(res$peak)
}
df.peak <- ddply(df, .(matrix), get.peak)

print(ggplot(df,aes(pos-1001,affinity,colour=matrix)) + geom_line() +
    geom_point(data=df.peak,aes(V1,V2),shape=8) +
    scale_colour_brewer('',palette='Set1') +
    facet_wrap(~matrix,ncol=1,scales='free') +
    labs(x='Bases relative to TSS',y='Affinity',
        title='Affinity profile of CXCL1 promoter region\n') +
    theme(legend.position='none',legend.key=element_blank(),
        legend.background=element_blank())
)
@

% ----------------------------------------------------------------------------

<<label=compel_data,echo=False,fig=False,cache=True,eval=False>>=
tf.symbol <- 'V\\$'
idx <- grep(tf.symbol, gev.param$X.matrix)
L <- 1000
all <- NULL
#wd <- '~/data/TRANSFAC/compel/seq/'
wd <- '~/data/hdf/qpcr_seq/'
all.file <- dir(wd,'trap')
#for (ii in 1:2) {
all <- foreach(ii=1:length(all.file), .combine='rbind') %dopar% {
    res <- read.delim(paste(wd,all.file[ii],sep=''), header=F)
    df <- subset(res, V1 %in% gev.param$X.matrix[idx])
    idx <- match(df$V1, gev.param$X.matrix)
    df$xi <- gev.param$xi0[idx] + gev.param$xi1[idx]*log10(L)
    df$sig <- gev.param$sig0[idx] + gev.param$sig1[idx]*log10(L)
    df$mu <- gev.param$mu0[idx] + gev.param$mu1[idx]*log10(L)
    df$pval <- rep(0,nrow(df))
    for (i in 1:nrow(df)) {
        df$pval[i] <- pgev(log10(df$V3[i]), loc=df$mu[i], scale=df$sig[i],
            shape=df$xi[i], lower.tail=F)
        profile <- as.numeric(unlist(strsplit(as.character(df$V2[i]),',')))
        peak.res <- peakdet(profile, 1e-30)
        df$pos[i] <- peak.res$peak[which.max(peak.res$peak[,2]),1]
    }
    df$gene <- sub('.trap', '', all.file[ii])
    #if (df$tf %in% df.uptime$Gene) {
    #    df$uptime <- df.uptime$value[which(df.uptime$Gene==df$tf)]
    #    all <- rbind(all, df)
    #}
    #all <- rbind(all, df)
    df[,c('V1','pos','pval','gene')]
}
@

% ----------------------------------------------------------------------------

<<label=compel,echo=False,fig=False,eval=False>>=
pdf('~/data/TRANSFAC/compel/compel_affinity.pdf',8,11)
unique.gene <- levels(factor(all$gene))
for (i in 1:ceiling(length(unique.gene)/12)) {
    slice <- seq((i-1)*12+1,i*12)
    slice <- slice[!(slice > length(unique.gene))]
    current <- subset(all, gene %in% unique.gene[slice])
    current <- current[current$pval!=0&current$pos>900,]
    print(ggplot(current,aes(pos-1001,-log10(pval))) + geom_point() +
        geom_text(data=subset(current,pval<0.05),aes(label=V1),size=1.5,vjust=-1,hjust=0.5) +
        facet_wrap(~gene,ncol=3,scales='free_y') +
        #xlim(-100,0) +
        labs(x='Bases relative to TSS',y='Affinity') 
        #    title='Affinity profile of CXCL1 promoter region\n') +
        #theme(legend.position='none',legend.key=element_blank(),
        #    legend.background=element_blank())
    )
}
dev.off()
@

% ----------------------------------------------------------------------------

<<label=peakdet,echo=False,fig=True,eval=False>>=
t <- seq(0,10,0.001)
series <- 0.3*sin(t) + sin(1.3*t) + 0.9*sin(4.2*t) + 0.02*rnorm(10001)
res <- peakdet(series, 0.3, t)
df <- data.frame(t=t, series=series)
df.peak <- as.data.frame(res$peak)
print(ggplot(df,aes(t,series)) + geom_line() + 
    geom_point(data=df.peak,aes(V1,V2),colour='red')
)
@

% ----------------------------------------------------------------------------

<<label=synergistic,echo=False,fig=True,eval=True,width=8,height=8,eval=False>>=
gene <- 'IL6'
res <- read.delim(paste('~/data/hdf/qpcr_seq/',gene,'.trap',sep=''), header=F)
df <- subset(res, V1 %in% gev.param$X.matrix)
tf.symbol <- 'V\\$'
idx <- grep(tf.symbol, gev.param$X.matrix)
df <- subset(res, V1 %in% gev.param$X.matrix[idx])
idx <- match(df$V1, gev.param$X.matrix)
L <- 1000
df$xi <- gev.param$xi0[idx] + gev.param$xi1[idx]*log10(L)
df$sig <- gev.param$sig0[idx] + gev.param$sig1[idx]*log10(L)
df$mu <- gev.param$mu0[idx] + gev.param$mu1[idx]*log10(L)
df$pval <- rep(0,nrow(df))
for (i in 1:nrow(df)) {
    df$pval[i] <- pgev(log10(df$V3[i]), loc=df$mu[i], scale=df$sig[i],
        shape=df$xi[i], lower.tail=F)
}
df$tf <- gene
df <- subset(df, pval<0.01)

get.peak <- function(df) {
    res <- peakdet(df$affinity, sort(df$affinity,decreasing=T)[2], df$pos-1001)
    as.data.frame(res$peak)
}

distance <- foreach(i=1:nrow(df), .combine='rbind') %:%
    foreach(j=1:nrow(df), .combine='c') %dopar% {
#distance <- matrix(0,2,nrow(df))
#for (i in 1:2) {
#    for (j in 1:nrow(df)) {

    data <- as.numeric(unlist(strsplit(as.character(df$V2[i]),',')))
    kernel <- as.numeric(unlist(strsplit(as.character(df$V2[j]),',')))
    df.conv <- data.frame(matrix='Convolution', 
        pos=1:(length(data)+length(kernel)-1),
        affinity=convolve(data,rev(kernel),type='o'))
    df.peak <- get.peak(df.conv)
    df.peak$V1[nrow(df.peak)] - (length(data)+length(kernel)-1-1001)
    #}
}
distance <- as.data.frame(distance, row.names=as.character(df$V1))
names(distance) <- as.character(df$V1)

dd.col <- as.dendrogram(hclust(dist(distance)))
col.ord <- order.dendrogram(dd.col)

dd.row <- as.dendrogram(hclust(dist(t(distance))))
row.ord <- order.dendrogram(dd.row)

df <- distance[col.ord,row.ord]
df$term <- rownames(df)
df <- within(df, term <- factor(term, levels = rownames(df)))
df <- melt(df)
mycolor <- gray.colors(128,0.9,0)
print(ggplot(df,aes(term,variable)) + 
    geom_tile(aes(fill=value)) +
    scale_fill_gradientn(colours=mycolor) +
    guides(fill = guide_colorbar(barwidth = 0.5, barheight = 10, 
        title.hjust=1.4, title.vjust=-0.1,
        title='Bases to TSS')) +
    labs(x = "",y = "", title=gene) + 
    scale_x_discrete(expand = c(0, 0)) +
    scale_y_discrete(expand = c(0, 0)) +
    theme(axis.ticks = element_blank(),axis.text.x=element_text(angle=90,size=5),
        axis.text.y=element_text(size=5),
        panel.border=element_blank(),legend.title=element_text(angle=90))
        #plot.margin=unit(c(0, 0, 0, 0), "cm"))
)
@

% ----------------------------------------------------------------------------

%\begin{figure}[ht]
%\centering
%<<label=fit_ex,echo=False,fig=True,eval=True,width=8,height=4>>=
%#idx <- symbol == 'CEBPD'
%idx <- grep('CEBPD|RELB|BHLHB5', symbol)
%ctrl$cond <- 'Control'
%treated$cond <- 'NHK medium'
%df.ctrl <- melt(ctrl[idx,], id.vars=c('Gene','cond'))
%df.ctrl$time <- rep(ctrl.tpoint, each=length(idx))
%df.treated <- melt(treated[idx,], id.vars=c('Gene','cond'))
%df.treated$time <- rep(treated.tpoint, each=length(idx))
%df <- rbind(df.ctrl, df.treated)
%df <- within(df, cond <- factor(cond, levels = c('NHK medium','Control')))
%with(df, levels(cond))
%
%# full/reduced model fit
%core <- cbind(ctrl[idx,2:(length(ctrl.tpoint)+1)],treated[idx,2:(length(treated.tpoint)+1)])
%red <- apply(core,1,fit.red)
%fit.reduced <- as.data.frame(red[1:length(ctrl.tpoint),])
%names(fit.reduced) <- symbol[idx]
%full <- apply(core,1,fit.full)
%fit.ctrl <- as.data.frame(full[1:length(ctrl.tpoint),])
%names(fit.ctrl) <- symbol[idx]
%fit.treated <- as.data.frame(full[-(1:length(ctrl.tpoint)),])
%names(fit.treated) <- symbol[idx]
%
%df.param <- apply(cbind(ctrl[idx,2:(length(ctrl.tpoint)+1)],
%    treated[idx,2:(length(treated.tpoint)+1)]),1,lrtest)
%#stop()
%df.param <- melt(df.param)
%df.param <- transform(df.param, Gene=symbol[idx], 
%    label=sprintf("italic(p)==%.1e",df.param$value))
%
%fit.reduced <- transform(fit.reduced, time=ctrl.tpoint)
%fit.reduced <- melt(fit.reduced, id.vars='time')
%fit.reduced <- transform(fit.reduced, Gene=rep(symbol[idx],each=length(ctrl.tpoint)))
%
%fit.ctrl <- transform(fit.ctrl, time=ctrl.tpoint)
%fit.ctrl <- melt(fit.ctrl, id.vars='time')
%fit.ctrl <- transform(fit.ctrl, Gene=rep(symbol[idx],each=length(ctrl.tpoint)))
%
%fit.treated <- transform(fit.treated, time=treated.tpoint)
%fit.treated <- melt(fit.treated, id.vars='time')
%fit.treated <- transform(fit.treated, Gene=rep(symbol[idx],each=length(treated.tpoint)))
%
%p <- ggplot(df, aes(time,value)) + geom_point(aes(colour=cond)) + 
%    geom_line(aes(colour=cond)) + 
%    facet_wrap(~Gene) +
%    geom_line(data=fit.reduced,aes(time,value),alpha=0.2,linetype='dotdash') +
%    geom_line(data=fit.ctrl,aes(time,value),alpha=0.2,linetype='dashed') +
%    geom_line(data=fit.treated,aes(time,value),alpha=0.2,linetype='dashed') +
%    geom_text(data=df.param, aes(x=4.5,y=4.5,label=label),size=5,parse=T) +
%    scale_colour_brewer('',palette='Set1') +
%    xlab('Time (h)') + ylab(expression(paste(log[2],' fold expression'))) 
%print(p+opts(legend.position=c(0.9,0.9),legend.key=theme_blank()))
%    #title='CEBPD\n'))
%@
%\caption{Example of the differential time series analysis using the 
%full/reduced model fitting (Mar and Quackenbush \emph{PLoS Comput Biol} 2009). 
%Gene expression time course from 2 conditions
%are fitted with a cubic polynomial either together (reduced model, dot-dashed 
%line) or separately (full model, dashed line). The deviances of the 2 model 
%fits are compared using the ANOVA test and a $p\mhyphen$value is generated,
%which compares the goodness-of-fit of both model fits and 
%implies the probability that this gene is differentially expressed under
%the 2 given conditions (equivalent to the alternative hypothesis that
%the full model fits the data better).}
%\label{fig:fit_ex}
%\end{figure}

% ----------------------------------------------------------------------------

%\begin{figure}[ht]
%\begin{center}
%<<label=pval_hist,echo=False,fig=True>>=
%#core <- cbind(ctrl[,-1],treated[,-1])
%#pval <- apply(core,1,lrtest)
%pval <- read.delim('~/data/hdf/mds/pval_hdf_nhk_16091.dat', header=F)$V1
%qval <- p.adjust(pval, 'BH')
%res <- hist(-log10(qval), plot=F)
%df <- data.frame(x=res$mids, y=res$counts, type='q-value')
%
%print(ggplot(df,aes(x,y)) + 
%    geom_bar(stat='identity',fill='gray',colour='black') +
%    #xlab(expression(paste(-log[10],' ',italic(q),'-value','\n'))) + 
%    xlab('MDS-based response metric') +
%    ylab('count') +
%    opts(title='MDS')
%)
%@
%\end{center}
%\caption{Histogram of the $-\log_{10}$ transformed and multiple testing 
%corrected (Benjamini-Hochberg) $p\mhyphen$values according
%to a analysis of deviance test of the full/reduced model fit of the time series.}
%\label{fig:raw}
%\end{figure}

% ----------------------------------------------------------------------------

%\begin{figure}[ht]
%\begin{center}
<<label=tf_volcano,echo=False,fig=False,eval=False>>=
ctrl <- read.delim('~/data/hdf/hdf_ctrl_16091.tsv')
treated <- read.delim('~/data/hdf/hdf_nhk_16091.tsv')
diff <- read.delim('~/data/hdf/hdf_diff_16091.tsv')

tf <- read.delim('~/data/tf/tf_table_final.csv', sep=';')
goi <- tf$Gene_Abbrev
genes <- tf$Class
#goi <- c('^IL[0-9]+$','^TNF[^R]','^CXCL','^CCL')
#genes <- c('ILs','TNFs','CXCLs','CCLs')
ctrl.tpoint <- c(0,2,4,8,12,24)
treated.tpoint <- c(0,1,2,3,4,6,8,10,12,18,24)
diff.tpoint <- 0:24
plot.ts <- function(goi, genes) {
    df <- NULL
    for (i in 1:length(goi)) {
        idx <- grep(goi[i],ctrl$Gene)
        tmp <- data.frame(tp=ctrl.tpoint,mean=colMeans(ctrl[idx,-1]),
            sd=apply(ctrl[idx,-1],2,sd),gene=rep(genes[i],length(ctrl.tpoint)),
            cond=rep('Control',length(ctrl.tpoint)))
        df <- rbind(df,tmp)
        tmp <- data.frame(tp=treated.tpoint,mean=colMeans(treated[idx,-1]),
            sd=apply(treated[idx,-1],2,sd),gene=rep(genes[i],length(treated.tpoint)),
            cond=rep('NHK',length(treated.tpoint)))
        df <- rbind(df,tmp)
    }
    df <- within(df, cond <- factor(cond, levels = c('Control','NHK')))
    with(df, levels(cond))
    print(ggplot(df,aes(tp,mean)) + 
        geom_ribbon(aes(ymin=mean-sd,ymax=mean+sd),fill='gray',colour='gray') + 
        geom_point() + scale_colour_brewer(palette='Set1') +
        geom_line(aes(colour=cond)) + 
        facet_grid(cond~gene) + xlab('\nTime (h)') + 
        #ylim(-1,3) +
        ylab(expression(paste(log[2],' fold expression','\n'))) +
        opts(title='Gene expression time course of HDF\n',legend.position='none')
    )
}

plot.pval <- function(goi, genes) {
    df <- NULL
    for (i in 1:length(goi)) {
        idx <- grep(goi[i],ctrl$Gene)
        core <- cbind(ctrl[idx,-1], treated[idx,-1])
        pval <- apply(core,1,lrtest)
        df <- rbind(df, data.frame(pval=pval,gene=ctrl$Gene[idx],group=genes[i],pos=i))
    }
   
    jitter <- runif(nrow(df),-0.2,0.2)
    print(ggplot(df,aes(group,-log10(pval))) + 
        geom_boxplot(width=0.5,outlier.colour='white') + 
        geom_point(aes(pos+jitter,-log10(pval))) +
        #scale_x_discrete(breaks=1:length(goi),labels=genes) +
        geom_text(aes(pos+jitter,-log10(pval),label=gene),size=3,hjust=-0.2,alpha=0.3) + 
        xlab('') + ylab(expression(paste(-log[10],' ',italic(p),'-value','\n'))) +
        opts(title='Gene expression time course of HDF\n',legend.position='none')
    )
    df
}

#source('stat-ellipse.R')
plot.tf.pval <- function() {
    idx <- match(goi, ctrl$Gene)
    cat <- genes[!is.na(idx)]
    idx <- na.omit(idx)
    core <- cbind(ctrl[idx,-1], treated[idx,-1])
    pval <- apply(core,1,lrtest)
    qval <- p.adjust(pval, 'BH')
    diff <- rowMeans(diff[idx,-1])
    df <- data.frame(qval=qval,gene=ctrl$Gene[idx],group=cat,diff=diff)
    
    pdf('~/data/hdf/hdf-tf_volcano.pdf',8,11)
    group.level <- levels(factor(df$group))
    get.contour <- function(df) {
        z <- kde2d(df$diff, -log10(df$qval), n=50)
        data.frame(x=rep(z$x,50), y=rep(z$y,each=50), z=melt(z$z)$value, 
            group=df$group[1])
    }
    for (i in 1:ceiling(length(group.level)/12)) {
    #for (i in 1:4) {
        slice <- seq((i-1)*12+1,i*12)
        slice <- slice[!(slice > length(group.level))]
        current <- group.level[slice]
        to.plot <- subset(df, group %in% current)
        #contour.data <- ddply(to.plot, .(group), get.contour)
        
        #calculating ellipses
        library(ellipse)
        df.ell <- data.frame()
        for (g in levels(factor(to.plot$group))) {
            current.data <- subset(to.plot, group==g)
            current.df <- as.data.frame(ellipse(cor(current.data$diff,
                -log10(current.data$qval)),
                scale=c(sd(current.data$diff),sd(-log10(current.data$qval))),
                centre=c(mean(current.data$diff),mean(-log10(current.data$qval)))))
            current.df$group <- g
            df.ell <- rbind(df.ell, current.df)
        }

        print(ggplot(to.plot,aes(diff,-log10(qval))) + 
            facet_wrap(~group,ncol=3) + #stat_ellipse() + 
            geom_point() +
            geom_text(aes(label=gene),size=3,hjust=-0.2) +
            #geom_contour(data=contour.data,aes(x,y,z=z),bins=3) +
            geom_path(data=df.ell, aes(x=x, y=y), colour='blue') +
            geom_vline(aes(xintercept=0),colour='gray',linetype='dashed') +
            geom_hline(aes(yintercept=-log10(0.05)),colour='red',linetype='dashed') +
            xlim(-1,4) + ylim(-1,5)
        )
    }
    dev.off()
    df
}

#df <- plot.tf.pval()
@
%\end{center}
%\caption{Time course of 4 different groups of cytokines. The average
%time-resolved expression profiles of 4 different groups of cytokines
%are plotted for control and the NHK conditioned medium case. Gray area 
%indicates one times standard deviation.}
%\caption{}
%\label{fig:raw}
%\end{figure}

% ----------------------------------------------------------------------------

<<label=tf_ts,echo=False,fig=True,eval=False>>=
idx <- na.omit(match(tf$Gene_Abbrev,treated$Gene))
#stop()
core <- cbind(ctrl[idx,-1], treated[idx,-1])
pval <- apply(core,1,lrtest)
qval <- p.adjust(pval, 'BH')
#diff <- rowMeans(diff[idx,-1])
#df <- data.frame(qval=qval,gene=ctrl$Gene[idx],diff=diff)
tf.ts <- treated[idx,]
#treated <- list(dat=tf.ts[qval<0.05,], cond='NHK', tpoint=treated.tpoint)
#df <- plot.impulse(treated, '~/data/hdf/hdf-tf_impulse.pdf')
df <- tf.ts[qval<0.05,]
#mat <- matrix(0,nrow(df),nrow(df))
#for (i in 1:nrow(df)) {
#    for (j in i:nrow(df)) {
#        #mat[i,j] <- dtw(df[i,-1], df[j,-1])$normalizedDistance
#        mat[i,j] <- dtw(df[i,-1], df[j,-1])$distance
#        mat[j,i] <- mat[i,j]
#    }
#}
#hc <- hclust(as.dist(mat))
#df$cluster <- as.character(cutree(hc, 3))
cl <- kmeans(df[,-1], 3, nstart=100)
df$cluster <- factor(cl$cluster)

mdf <- melt(df, id.vars=c('Gene','cluster'))
mdf$variable <- rep(treated.tpoint, each=nrow(df))

print(ggplot(mdf,aes(variable,value,group=Gene,colour=cluster)) + geom_point() + 
    geom_line() + scale_colour_brewer(palette='Set1') +
    xlab('Time (h)') + ylab(expression(paste(log[2]~'fold expression'))) +
    opts(title='TF expression (NHK-conditioned medium)\n',
        legend.position='none')
)

#print(ggplot(df,aes(diff,-log10(qval))) + 
#    geom_point() +
#    geom_text(aes(label=gene),size=3,hjust=-0.2,alpha=0.3) +
#    #geom_contour(data=contour.data,aes(x,y,z=z),bins=3) +
#    #geom_path(data=df.ell, aes(x=x, y=y), colour='blue') +
#    geom_vline(aes(xintercept=0),colour='gray',linetype='dashed',size=1) +
#    #geom_hline(aes(yintercept=-log10(0.05)),colour='red',linetype='dashed',size=1) +
#    xlim(-3,3) + #ylim(-1,5) +
#    xlab(expression(paste('Average'~log[2]~'fold change (NHK - control)'))) + 
#    ylab(expression(paste(-log[10]~italic(q),'-value'))) +
#    opts(title='TF differential expression over time\n')
#)
@

% ----------------------------------------------------------------------------

%\begin{figure}[ht]
%\begin{center}
%<<label=pval_cytokine,echo=False,fig=True,width=8,height=5>>=
%df.cytokine <- plot.pval(goi, genes)
%@
%\end{center}
%%\caption{Time course of 4 different groups of cytokine receptors. The average
%%time-resolved expression profiles of 4 different groups of cytokine receptors
%%are plotted for control and the NHK conditioned medium case. Gray area 
%%indicates one times standard deviation.}
%\caption{}
%\label{fig:raw}
%\end{figure}

% ----------------------------------------------------------------------------

%\begin{figure}[ht]
%\begin{center}
%<<label=ts_receptor,echo=False,fig=True,width=8,height=5>>=
%goi <- c('^IL[0-9]+R','^TNFR','^CXCR','^CCR')
%genes <- c('IL-Rs','TNFRs','CXCRs','CCRs')
%plot.ts(goi, genes)
%@
%\end{center}
%\caption{Time course of 4 different groups of cytokine receptors. The average
%time-resolved expression profiles of 4 different groups of cytokine receptors
%are plotted for control and the NHK conditioned medium case. Gray area 
%indicates one times standard deviation.}
%\label{fig:raw}
%\end{figure}

% ----------------------------------------------------------------------------

%\begin{figure}[ht]
%\begin{center}
%<<label=pval_receptor,echo=False,fig=True,width=8,height=5>>=
%df.receptor <- plot.pval(goi, genes)
%@
%\end{center}
%\caption{Control and NHK-conditioned time series were fitted with a 
%full/reduced cubic polynomial model. Analysis of deviance of the model fit
%was then performed to judge whether the control and NHK-conditioned time
%series can be explained by a single fit. The higher the negative 
%log-transformed $p\mhyphen$value, the more significant the analysis of 
%deviance test is and thus the more likely that NHK-conditioned expression
%profile deviates from the control.}
%\label{fig:raw}
%\end{figure}

% ----------------------------------------------------------------------------

%\begin{figure}[ht]
%\begin{center}
%<<label=fitstat,echo=False,fig=True>>=
%library(qvalue)
%pval <- melt(apply(treated[,-1],1,gof))
%qval <- p.adjust(pval$value, 'BH')
%qres <- hist(-log10(qval), plot=F)
%#pres <- hist(-log10(qval$pvalues), plot=F)
%df <- data.frame(x=qres$mids, y=qres$counts, type='q-value')
%#df <- rbind(df, data.frame(x=qres$mids, y=qres$counts, type='q-value'))
%#df <- data.frame(p=qval$pvalues, q=p.adjust(qval$pvalues,'BH'))
%
%print(ggplot(df,aes(x,y)) + 
%    #geom_point()
%    geom_bar(stat='identity',fill='gray',colour='black') +
%    #facet_wrap(~type)
%    #scale_x_log10() + 
%    xlab('p-value') + ylab('count')
%)
%@
%\end{center}
%\caption{Histogram of the $-\log_{10}$ transformed and multiple testing 
%corrected (Benjamini-Hochberg) $p\mhyphen$values according
%to a $\chi^2$ goodness-of-fit test of the logistic fit of the time series.}
%\label{fig:raw}
%\end{figure}

% ----------------------------------------------------------------------------

%<<label=tf_cytokine,echo=False,fig=True>>=
%ligand <- read.delim('~/data/hdf/hdf_nhk_ligand_fit.dat', header=F)$V1
%tf <- tfbs$common[order(truncated)]
%
%pdf('~/data/hdf/hdf-tf_cytokine.pdf',8,11)
%for (i in 1:2) {
%    slice <- seq((i-1)*12+1,i*12)
%    df <- NULL
%    for (i in 1:length(slice)) {
%        expr <- diff[,2+slice[i]]
%        gene.ranked <- diff$Gene[order(expr,decreasing=T)]
%        for (j in 1:length(tf)) {
%            target <- eval(parse(text=paste("mSigDB$'",tf[j],"'",sep="")))
%            df <- rbind(df, data.frame(TF=tf[j],rank=match(target,gene.ranked),
%                tpoint=paste(slice[i],'h')))
%        }
%    }
%
%    print(ggplot(df,aes(TF,rank)) + 
%        geom_point(shape='-') + facet_wrap(~tpoint,ncol=3) +
%        #xlab('half-maximal time (h)') + #xlim(0,30) +
%        #ylab('count') +
%        ylim(0,200) +
%        opts(title='Logistic fitting gene expression time course of HDF\n')
%    )
%}
%dev.off()
%@

% ----------------------------------------------------------------------------

<<label=cytokine,echo=False,fig=False,cache=True,eval=False>>=
ligand <- read.delim('~/data/hdf/hdf_nhk_ligand_fit.dat', header=F)
receptor <- read.delim('~/data/hdf/hdf_nhk_receptor_fit.dat', header=F)
df.cytokine <- transform(ligand, type=rep('ligand',nrow(ligand)))
df.cytokine <- rbind(df.cytokine, transform(receptor, type=rep('receptor',nrow(receptor))))
g <- rep('Other',nrow(df.cytokine))
groups <- c('IL/R','TNF/R','CXCL/R','CCL/R')
group.ligand <- c('^IL[0-9]+[^R]*','TNF[^R]','^CXCL','^CCL')
for (i in 1:length(group.ligand)) {
    idx <- grep(group.ligand[i], df.cytokine$V1)
    g[idx] <- groups[i]
}
group.receptor <- c('^IL[0-9]+R','^TNFR','^CXCR','^CCR')
for (i in 1:length(group.receptor)) {
    idx <- grep(group.receptor[i], df.cytokine$V1)
    g[idx] <- groups[i]
}
df.cytokine$group <- g
df.cytokine$qval <- qval[match(df.cytokine$V1,ctrl$Gene)]
df.cytokine <- within(df.cytokine, group <- factor(group, levels = c(groups,'Other')))
with(df.cytokine, levels(group))
@

% ----------------------------------------------------------------------------

%\begin{figure}[ht]
%\begin{center}
%<<label=tf_cytokine,echo=False,fig=True,width=8,height=11>>=
%tf <- tfbs$common[order(truncated)]
%regulator <- tapply(unlist(mSigDB),unlist(mSigDB),function(x){names(x)})
%df <- NULL
%for (i in 1:nrow(df.cytokine)) {
%    if (df.cytokine$V1[i] %in% names(regulator)) {
%        reg <- eval(parse(text=paste('regulator$',df.cytokine$V1[i],sep='')))
%        for (j in 1:length(reg)) {
%            df <- rbind(df, transform(df.cytokine[i,],TF=reg[j]))
%        }
%    }
%}
%tf.truncated <- sub('.*V\\$','',df$TF)
%df <- within(df, TF <- factor(TF, levels = df$TF[order(tf.truncated)]))
%with(df, levels(TF))
%
%print(ggplot(df[df$V4<0.05&df$qval<0.05&df$type=='ligand',],aes(V2,TF)) + 
%    geom_point(aes(colour=group),size=1) + 
%    geom_text(aes(label=V1),size=1,hjust=-0.2,alpha=0.3) + 
%    scale_colour_brewer('',palette='Set1') +
%    guides(colour = guide_legend(ncol = 2)) +
%    xlab('starting time') + #xlim(0,12) +
%    ylab('') +
%    opts(title='Logistic fitting gene expression time course of HDF\n',
%        legend.position='none',
%        #legend.position=c(0.5,0.9),legend.key=theme_blank(),
%        #legend.text=theme_text(size=8),
%        #legend.background = theme_rect(),
%        axis.text.y=theme_text(size=2))
%)
%@
%\end{center}
%\caption{Histogram of the $-\log_{10}$ transformed and multiple testing 
%corrected (Benjamini-Hochberg) $p\mhyphen$values according
%to a $\chi^2$ goodness-of-fit test of the logistic fit of the time series.}
%\label{fig:raw}
%\end{figure}

% ----------------------------------------------------------------------------

%\begin{figure}[ht]
%\begin{center}
%<<label=mds,echo=False,fig=True>>=
%dat <- read.delim('~/data/hdf/hdf_nhk_16091.tsv')
%coord <- read.delim('~/data/hdf/mds/pca_hdf_nhk_16091_normed_euc', header=F, sep=' ')
%coord <- coord[,1:2]
%df <- as.data.frame(coord)
%df$pvals <- read.delim('~/data/hdf/mds/pval_hdf_nhk_16091.dat', header=F)$V1
%df$label <- dat$Gene
%
%mycolor <- gray.colors(128,0.9,0)
%print(ggplot(df, aes(x=V1,y=V2)) +
%    geom_point(aes(colour=-log10(pvals))) + 
%    geom_text(data=df[df$pvals<0.001,],aes(x=V1,y=V2,label=label),colour='black',size=2,
%        hjust=-0.2,alpha=0.3) +
%    scale_colour_gradientn(colours=mycolor) +
%    guides(colour = guide_colorbar(barwidth = 0.5, barheight = 10, title.hjust=1.6,
%        title.vjust=0.1,title=expression(paste(-log[10],' ',italic(p),'-value')))) +
%    xlab("PC 1") + ylab("PC 2") + #ylim(-0.5,0.5) +
%    coord_equal() +
%    opts(legend.title=theme_text(angle=90),title="MDS")
%)
%@
%\end{center}
%\caption{Histogram of the $-\log_{10}$ transformed and multiple testing 
%corrected (Benjamini-Hochberg) $p\mhyphen$values according
%to a $\chi^2$ goodness-of-fit test of the logistic fit of the time series.}
%\label{fig:raw}
%\end{figure}

% ----------------------------------------------------------------------------

%\begin{figure}[ht]
%\begin{center}
%<<label=thalf,echo=False,fig=True,width=8,height=8>>=
%df.fit <- as.data.frame(apply(treated[,-1],1,fit))
%thalf <- apply(df.fit,2,function(x)xfit[which.max(abs(diff(x)/diff(xfit)))])
%#thalf <- melt(thalf[pval$value<0.01])
%df <- data.frame(pval=qval, thalf=thalf, max=as.numeric(t(df.fit[nrow(df.fit),])), 
%    gene=symbol)
%
%print(ggplot(df,aes(thalf,max)) + 
%    geom_point(aes(colour=-log10(pval))) + 
%    geom_text(aes(label=gene),size=3,hjust=-0.2,alpha=0.3) + #facet_grid(~type) +
%    scale_colour_gradient(expression(paste(-log[10],' p-value')),
%        low='skyblue',high='black') +
%    guides(colour = guide_colorbar(barwidth = 10, barheight = 0.5)) +
%    geom_hline(aes(yintercept=0),linetype='dashed') +
%    xlab('half-maximal time (h)') + xlim(0,30) +
%    ylab(expression(paste('maximal ',log[2],' fold expression'))) +
%    opts(title='Logistic fitting gene expression time course of HDF\n',
%        legend.position='top')
%)
%@
%\end{center}
%\caption{Maximal expression vs. half-maximal time for all genes.
%Microarray time series of HDF under NHK conditioned medium were first
%fitted with a logistic function, starting time is defined as the half-maximal
%time of the fit and maximal fold expression is the plateau/steady state of
%the fit. Color code indicates the $-\log_{10} p\mhyphen$values for each gene
%according to a $\chi^2$ test.}
%\label{fig:raw}
%\end{figure}

% ----------------------------------------------------------------------------

%\begin{figure}[ht]
%\begin{center}
%<<label=start,echo=False,fig=True,width=8,height=5>>=
%ligand <- read.delim('~/data/hdf/hdf_nhk_ligand_fit.dat', header=F)
%receptor <- read.delim('~/data/hdf/hdf_nhk_receptor_fit.dat', header=F)
%df <- transform(ligand, type=rep('ligand',nrow(ligand)))
%df <- rbind(df, transform(receptor, type=rep('receptor',nrow(receptor))))
%g <- rep('Other',nrow(df))
%groups <- c('IL/R','TNF/R','CXCL/R','CCL/R')
%group.ligand <- c('^IL[0-9]+[^R]*','TNF[^R]','^CXCL','^CCL')
%for (i in 1:length(group.ligand)) {
%    idx <- grep(group.ligand[i], df$V1)
%    g[idx] <- groups[i]
%}
%group.receptor <- c('^IL[0-9]+R','^TNFR','^CXCR','^CCR')
%for (i in 1:length(group.receptor)) {
%    idx <- grep(group.receptor[i], df$V1)
%    g[idx] <- groups[i]
%}
%df$group <- g
%df$qval <- qval[match(df$V1,ctrl$Gene)]
%df <- within(df, group <- factor(group, levels = c(groups,'Other')))
%with(df, levels(group))
%print(ggplot(df[df$V4<0.05&df$qval<0.05,],aes(V2,V5)) + 
%    geom_point(aes(colour=group)) + 
%    geom_text(aes(label=V1),size=3,hjust=-0.2,alpha=0.3) + facet_grid(~type) +
%    #scale_colour_gradient(expression(paste(-log[10],' p-value')),
%    #    low='skyblue',high='black') +
%    scale_colour_brewer('',palette='Set1') +
%    #guides(colour = guide_colorbar(barwidth = 10, barheight = 0.5)) +
%    guides(colour = guide_legend(ncol = 2)) +
%    geom_hline(aes(yintercept=0),linetype='dashed') +
%    xlab('starting time') + xlim(0,12) +
%    ylab(expression(paste('maximal ',log[2],' fold expression'))) +
%    opts(title='Logistic fitting gene expression time course of HDF\n',
%        legend.position=c(0.9,0.9),legend.key=theme_blank(),
%        legend.text=theme_text(size=8))
%)
%@
%\end{center}
%\caption{Maximal expression vs. onset time for cytokines and the respective
%receptors. Microarray time series of HDF under NHK conditioned medium were
%fitted with a logistic function, starting time is defined as the half-maximal
%time of the fit and maximal fold expression is the plateau/steady state of
%the fit. Color code indicates the $-\log_{10} p\mhyphen$values for each genes
%according to a $\chi^2$ test, only genes with a $p\mhyphen$value $<$ 0.05 are shown.}
%\label{fig:raw}
%\end{figure}

% ----------------------------------------------------------------------------

%\begin{figure}[ht]
%\begin{center}
%<<label=start_hist,echo=False,fig=True,width=8,height=6>>=
%ligand <- read.delim('~/data/hdf/hdf_nhk_ligand_fit.dat', header=F)
%receptor <- read.delim('~/data/hdf/hdf_nhk_receptor_fit.dat', header=F)
%df <- transform(ligand, type=rep('ligand',nrow(ligand)))
%df <- rbind(df, transform(receptor, type=rep('receptor',nrow(receptor))))
%print(ggplot(df[df$V4<0.05,],aes(V2,y=..density..)) + 
%    geom_histogram(fill='gray',colour='black') + facet_grid(~type) +
%    geom_density(linetype='dashed') +
%    xlab('starting time') + 
%    ylab('density') +
%    opts(title='Logistic fitting gene expression time course of HDF\n')
%)
%@
%\end{center}
%\caption{Distribution of onset time for cytokines and the respective
%receptors. A Gaussian smooth density estimate is also plotted for
%each histogram. Only genes with a $p\mhyphen$value $<$ 0.05 are considered.}
%\label{fig:raw}
%\end{figure}

\end{document}
